package Hotel.GUI.Recepcionista;

import Hotel.BackEnd.Excepciones.InputsVaciosException;
import Hotel.BackEnd.Hotel.Habitacion;
import Hotel.BackEnd.Manejador.HabitacionM;
import Hotel.BackEnd.Manejador.ReservarHabitacionM;
import Hotel.GUI.Principal.Principal;
import RUN.DefaultValues;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import org.jdesktop.observablecollections.ObservableCollections;
import org.jdesktop.observablecollections.ObservableList;

/**
 *
 * @author angelrg
 */
public class NuevaReservacion extends javax.swing.JInternalFrame {

    private List<Habitacion> listadoHabEntrada;
    private List<Habitacion> listadoHabSalida;
    private List<Habitacion> listadoAux;
    private ObservableList<Habitacion> listaObservableHabEstrada;
    private ObservableList<Habitacion> listaObservableHabSalida;

    private HabitacionM manejadorHabitacion;
    private DefaultValues valoresDefinidos;
    private ReservarHabitacionM manejadorReservacion;

    private Habitacion habitacionSeleccionada;

    private DatosClienteReservacion datosCliente;

    private String fechaInicial = "";
    private String fechaFinal = "";

    public NuevaReservacion(Connection conexion) {
        listadoHabEntrada = new ArrayList<>();
        listadoHabSalida = new ArrayList<>();
        listadoAux = new ArrayList<>();
        listaObservableHabEstrada = ObservableCollections.observableList(listadoHabEntrada);
        listaObservableHabSalida = ObservableCollections.observableList(listadoHabSalida);
        valoresDefinidos = new DefaultValues();

        habitacionSeleccionada = new Habitacion();
        manejadorHabitacion = new HabitacionM(conexion);
        manejadorReservacion = new ReservarHabitacionM(conexion);
        datosCliente = new DatosClienteReservacion(conexion);

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel1 = new javax.swing.JLabel();
        fechaInicialFormattedTextField = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        fechaFinalFormattedTextField = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        habitacionesTable = new javax.swing.JTable();
        limpiarButton = new javax.swing.JButton();
        buscarButton = new javax.swing.JButton();
        agregarButton = new javax.swing.JButton();
        cancelarButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        habitacionesTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        guardarButton = new javax.swing.JButton();

        setMaximizable(true);
        setResizable(true);
        setTitle("Nueva Reservacion");

        jLabel1.setText("Fecha Inicial:");

        try {
            fechaInicialFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        fechaInicialFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fechaInicialFormattedTextFieldFocusLost(evt);
            }
        });

        jLabel2.setText("Fecha Final:");

        try {
            fechaFinalFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        fechaFinalFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fechaFinalFormattedTextFieldFocusLost(evt);
            }
        });

        habitacionesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${listaObservableHabEstrada}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, habitacionesTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nombre}"));
        columnBinding.setColumnName("Nombre");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${precio}"));
        columnBinding.setColumnName("Precio");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${estadoTipo}"));
        columnBinding.setColumnName("Estado Tipo");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${habitacionSeleccionada}"), habitacionesTable, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(habitacionesTable);

        limpiarButton.setText("Limpiar");
        limpiarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarButtonActionPerformed(evt);
            }
        });

        buscarButton.setText("Buscar");
        buscarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarButtonActionPerformed(evt);
            }
        });

        agregarButton.setText("Agregar al Listado");
        agregarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarButtonActionPerformed(evt);
            }
        });

        cancelarButton.setText("Cancelar");
        cancelarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Noto Sans UI", 0, 10)); // NOI18N
        jLabel3.setText("Ej: 2017-02-30");

        habitacionesTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${listaObservableHabSalida}");
        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, habitacionesTable1);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nombre}"));
        columnBinding.setColumnName("Nombre");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${estadoTipo}"));
        columnBinding.setColumnName("Estado Tipo");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${precio}"));
        columnBinding.setColumnName("Precio");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane2.setViewportView(habitacionesTable1);

        jLabel4.setText("Resultados de Busqueda");

        jLabel5.setText("Habitaciones a reservar");

        guardarButton.setText("Guardar Reservacion");
        guardarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jLabel4)
                        .addGap(220, 220, 220)
                        .addComponent(jLabel5))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(fechaInicialFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel2)
                                    .addGap(18, 18, 18)
                                    .addComponent(fechaFinalFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(buscarButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cancelarButton))))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(agregarButton)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(limpiarButton))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(guardarButton, javax.swing.GroupLayout.Alignment.TRAILING)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fechaInicialFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(fechaFinalFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarButton)
                    .addComponent(cancelarButton))
                .addGap(3, 3, 3)
                .addComponent(jLabel3)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(limpiarButton)
                    .addComponent(agregarButton)
                    .addComponent(guardarButton))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarButtonActionPerformed
        try {
            if (fechaFinalFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty()
                    || fechaInicialFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty()) {
                limpiarFechas();
                JOptionPane.showMessageDialog(this, "Debe indicar un intervalo de tiempo", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (!fechaFinalFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty()
                    && !fechaInicialFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty()) {
                if (valoresDefinidos.validarFecha(fechaInicialFormattedTextField.getText()) && valoresDefinidos.validarFecha(fechaFinalFormattedTextField.getText())) {
                    if (manejadorReservacion.cantidadDelDias(fechaInicialFormattedTextField.getText(), fechaFinalFormattedTextField.getText()) <= 0) {
                        fechaFinal = fechaFinalFormattedTextField.getText();
                        fechaInicial = fechaInicialFormattedTextField.getText();
                        limpiarFechas();
                        JOptionPane.showMessageDialog(this, "Intervalo de tiempo Incorrecto", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        actualizarBusquedaObservableEntrada(manejadorHabitacion.habitacionesDisponibles(fechaInicialFormattedTextField.getText(), fechaFinalFormattedTextField.getText()));
                    }
                } else {
                    limpiarFechas();
                    JOptionPane.showMessageDialog(this, "Fecha invalida", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (InputsVaciosException | HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buscarButtonActionPerformed

    private void cancelarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarButtonActionPerformed
        if (!listadoHabSalida.isEmpty()) {
            int respuesta = JOptionPane.showConfirmDialog(this, "Desea abandonar sin terminar la reservacion?", "Salir", JOptionPane.YES_NO_OPTION);
            if (respuesta == 0) {
                limpiarFechas();
                limpiarTablas();
                this.setVisible(false);
            }
        } else {
            this.setVisible(false);
        }
    }//GEN-LAST:event_cancelarButtonActionPerformed

    private void limpiarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarButtonActionPerformed
        limpiarFechas();
        limpiarTablas();
        listaObservableHabSalida.clear();
        listaObservableHabEstrada.clear();
        agregarButton.setEnabled(false);
        guardarButton.setEnabled(false);
    }//GEN-LAST:event_limpiarButtonActionPerformed

    private void agregarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarButtonActionPerformed
        if (habitacionSeleccionada != null) {
            fechaFinalFormattedTextField.setEnabled(false);
            fechaInicialFormattedTextField.setEnabled(false);
            listadoAux.add(habitacionSeleccionada);
            actualizarBusquedaObservableSalida(listadoAux);
            guardarButton.setEnabled(true);
        } else {
            agregarButton.setEnabled(false);
        }
    }//GEN-LAST:event_agregarButtonActionPerformed

    private void guardarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarButtonActionPerformed
        if (listadoHabSalida.size() <= 0) {
            JOptionPane.showMessageDialog(this, "Ya exiten usuarios con similar ID", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            datosCliente.guardarReservacion(listadoHabSalida, DefaultValues.CON_RESERVACION, fechaInicialFormattedTextField.getText(), fechaFinalFormattedTextField.getText());
        }
    }//GEN-LAST:event_guardarButtonActionPerformed

    private void fechaInicialFormattedTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fechaInicialFormattedTextFieldFocusLost
        if (!fechaInicialFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty()) {
            if (!valoresDefinidos.validarFecha(fechaInicialFormattedTextField.getText())) {
                JOptionPane.showMessageDialog(this, "Formato de fecha inicial invalido", "Error", JOptionPane.ERROR_MESSAGE);
                fechaInicialFormattedTextField.setText("");
            }
        }

    }//GEN-LAST:event_fechaInicialFormattedTextFieldFocusLost

    private void fechaFinalFormattedTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fechaFinalFormattedTextFieldFocusLost
        if (!fechaFinalFormattedTextField.getText().replace(" ", "").replace("-", "").isEmpty()) {
            if (!valoresDefinidos.validarFecha(fechaFinalFormattedTextField.getText())) {
                JOptionPane.showMessageDialog(this, "Formato de fecha final invalido", "Error", JOptionPane.ERROR_MESSAGE);
                fechaFinalFormattedTextField.setText("");
            }
        }
    }//GEN-LAST:event_fechaFinalFormattedTextFieldFocusLost

    public void actualizarBusquedaObservableEntrada(List<Habitacion> listaHabitacion) {
        this.listaObservableHabEstrada.clear();
        this.listaObservableHabEstrada.addAll(listaHabitacion);
    }

    public void actualizarBusquedaObservableSalida(List<Habitacion> listaHabitacion) {
        this.listaObservableHabSalida.clear();
        this.listaObservableHabSalida.addAll(listaHabitacion);
    }

    public ObservableList<Habitacion> getListaObservableHabEstrada() {
        return listaObservableHabEstrada;
    }

    public void setListaObservableHabEstrada(ObservableList<Habitacion> listaObservableHabEstrada) {
        this.listaObservableHabEstrada = listaObservableHabEstrada;
    }

    public ObservableList<Habitacion> getListaObservableHabSalida() {
        return listaObservableHabSalida;
    }

    public void setListaObservableHabSalida(ObservableList<Habitacion> listaObservableHabSalida) {
        this.listaObservableHabSalida = listaObservableHabSalida;
    }

    public Habitacion getHabitacionSeleccionada() {
        return habitacionSeleccionada;
    }

    public void setHabitacionSeleccionada(Habitacion habitacionSeleccionada) {
        if (habitacionSeleccionada != null) {
            this.habitacionSeleccionada = habitacionSeleccionada.clone();
            agregarButton.setEnabled(true);
        } else {
            agregarButton.setEnabled(false);
            this.habitacionSeleccionada = null;
        }
        this.habitacionSeleccionada = habitacionSeleccionada;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarButton;
    private javax.swing.JButton buscarButton;
    private javax.swing.JButton cancelarButton;
    private javax.swing.JFormattedTextField fechaFinalFormattedTextField;
    private javax.swing.JFormattedTextField fechaInicialFormattedTextField;
    private javax.swing.JButton guardarButton;
    private javax.swing.JTable habitacionesTable;
    private javax.swing.JTable habitacionesTable1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton limpiarButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    public void limpiarFechas() {
        fechaFinalFormattedTextField.setText("");
        fechaInicialFormattedTextField.setText("");
        fechaFinal = "";
        fechaInicial = "";
        fechaFinalFormattedTextField.setEnabled(true);
        fechaInicialFormattedTextField.setEnabled(true);
    }

    public void limpiarTablas() {
        listaObservableHabEstrada.clear();
        listaObservableHabSalida.clear();
        listadoHabEntrada.clear();
        listadoHabSalida.clear();
        listadoAux.clear();
    }
}
