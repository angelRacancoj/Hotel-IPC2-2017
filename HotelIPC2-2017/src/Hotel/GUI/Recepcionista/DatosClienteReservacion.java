/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Hotel.GUI.Recepcionista;

import Hotel.BackEnd.Excepciones.InputsVaciosException;
import Hotel.BackEnd.Hotel.Habitacion;
import Hotel.BackEnd.Hotel.Reservacion;
import Hotel.BackEnd.Manejador.ClienteM;
import Hotel.BackEnd.Manejador.ReservarHabitacionM;
import Hotel.BackEnd.Persona.Cliente;
import RUN.DefaultValues;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author angelrg
 */
public class DatosClienteReservacion extends javax.swing.JFrame {

    private String estado = "";
    private Cliente cliente = null;
    private String fechaInicial = "";
    private String fechaFinal = "";

    private List<Habitacion> listadoHabitaciones;

    private ReservarHabitacionM manejadorReservaciones;
    private ClienteM manejadorCliente;

    public DatosClienteReservacion(Connection conexion) {
        listadoHabitaciones = new ArrayList<>();

        manejadorCliente = new ClienteM(conexion);
        manejadorReservaciones = new ReservarHabitacionM(conexion);
        cliente = new Cliente();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        cancelarButton = new javax.swing.JButton();
        idClienteTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        NITTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        telefonoTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        direccionTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        limpiarButton = new javax.swing.JButton();
        nombreTextField = new javax.swing.JTextField();
        guardarButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        cumpleFormattedTextField = new javax.swing.JFormattedTextField();

        setTitle("Datos del Cliente");

        jLabel3.setText("*Nombre:");

        cancelarButton.setText("Cancelar");
        cancelarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarButtonActionPerformed(evt);
            }
        });

        idClienteTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                idClienteTextFieldFocusLost(evt);
            }
        });

        jLabel4.setText("*ID:");

        jLabel5.setText("*NIT:");

        jLabel6.setText("Telefono:");

        jLabel1.setText("Ingrese cuidadosamente los datos del cliente, ");

        jLabel7.setText("Direccion:");

        jLabel2.setText("solo los campos con (*) son obligatorios:");

        limpiarButton.setText("Limpiar");
        limpiarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarButtonActionPerformed(evt);
            }
        });

        nombreTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreTextFieldActionPerformed(evt);
            }
        });

        guardarButton.setText("Guardar");
        guardarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Cunple:");

        try {
            cumpleFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(NITTextField)
                                            .addComponent(telefonoTextField)
                                            .addComponent(direccionTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(nombreTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                                                .addComponent(cumpleFormattedTextField))
                                            .addContainerGap()))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(idClienteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap())))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(limpiarButton)
                        .addGap(45, 45, 45)
                        .addComponent(guardarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelarButton)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idClienteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NITTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(telefonoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(direccionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cumpleFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarButton)
                    .addComponent(cancelarButton)
                    .addComponent(limpiarButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void idClienteTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_idClienteTextFieldFocusLost
        try {
            if (!idClienteTextField.getText().replace(" ", "").isEmpty()) {
                if (manejadorCliente.busqueda(idClienteTextField.getText()).size() > 1) {
                    JOptionPane.showMessageDialog(this, "Ya existe usuarios con similar ID", "Error", JOptionPane.ERROR_MESSAGE);
                    guardarButton.setEnabled(false);
                    limpiar();
                } else if (manejadorCliente.busqueda(idClienteTextField.getText()).size() == 1) {
                    cliente = manejadorCliente.busqueda(idClienteTextField.getText()).get(0);
                    nombreTextField.setText(cliente.getNombre());
                    NITTextField.setText(cliente.getNIT());
                    direccionTextField.setText(cliente.getDireccion());
                    telefonoTextField.setText(cliente.getPhone());
                    cumpleFormattedTextField.setText(cliente.getCumpleanios());
                    guardarButton.setEnabled(true);
                }else{
                    guardarButton.setEnabled(true);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe especificar el ID del cliente", "Error", JOptionPane.ERROR_MESSAGE);
                guardarButton.setEnabled(false);
            }
        } catch (InputsVaciosException | HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_idClienteTextFieldFocusLost

    private void nombreTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreTextFieldActionPerformed

    private void guardarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarButtonActionPerformed
        try {
            if (idClienteTextField.getText().replace(" ","").isEmpty() || nombreTextField.getText().replace(" ","").isEmpty() || NITTextField.getText().replace(" ","").isEmpty()) {
                JOptionPane.showMessageDialog(this, "Debe llenar los campos obligatorios", "Error", JOptionPane.ERROR_MESSAGE);
            }else{
                if ((manejadorCliente.busqueda(idClienteTextField.getText()).size() == 1) || manejadorCliente.agregarCliente(idClienteTextField.getText(), 
                    NITTextField.getText(), nombreTextField.getText(), direccionTextField.getText(), telefonoTextField.getText(), cumpleFormattedTextField.getText())) {
                if (estado.equalsIgnoreCase(DefaultValues.CON_RESERVACION)) {
                    for (int i = 0; i < listadoHabitaciones.size(); i++) {
                        Habitacion hab = listadoHabitaciones.get(i);
                        String noHab = hab.getNombre();
                        System.out.println("Reservacion: " + noHab + ", " + idClienteTextField.getText() + ", " + fechaInicial + ", " + fechaFinal);
                        if (!manejadorReservaciones.crearReservacion(idClienteTextField.getText(), fechaInicial, fechaFinal, noHab)) {
                            JOptionPane.showMessageDialog(this, "Error al guardar la reservacion", "Error", JOptionPane.ERROR_MESSAGE);
                        }else{
                            JOptionPane.showMessageDialog(this, "Reservacion exitosa", "Operacion exitosa", JOptionPane.INFORMATION_MESSAGE);
                            this.setVisible(false);
                            limpiar();
                        }
                    }
                }else if(estado.equalsIgnoreCase(DefaultValues.SIN_RESERVACION)){
                    for (int i = 0; i < listadoHabitaciones.size(); i++) {
                        Habitacion hab = listadoHabitaciones.get(i);
                        String noHab = hab.getNombre();
                        System.out.println("Reservacion: " + noHab + ", " + idClienteTextField.getText() + ", " + fechaInicial + ", " + fechaFinal);
//                        if (!manejadorReservaciones.CheckInSinReservacion(idClienteTextField.getText(), fechaInicial, fechaFinal, noHab,"")) {
//                            JOptionPane.showMessageDialog(this, "Error al guardar la reservacion", "Error", JOptionPane.ERROR_MESSAGE);
//                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Error al guardar los datos del Cliente", "Error", JOptionPane.ERROR_MESSAGE);
            }
            }
        } catch (InputsVaciosException | HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_guardarButtonActionPerformed

    private void limpiarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarButtonActionPerformed
        limpiar();
    }//GEN-LAST:event_limpiarButtonActionPerformed

    private void cancelarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarButtonActionPerformed
        if (!idClienteTextField.getText().replace(" ", "").isEmpty()) {
            int respuesta = JOptionPane.showConfirmDialog(this, "Desea abandonar sin terminar la reservacion?", "Salir", JOptionPane.YES_NO_OPTION);
            if (respuesta == 0) {
                limpiar();
                this.setVisible(false);
            }
        } else {
            this.setVisible(false);
        }
    }//GEN-LAST:event_cancelarButtonActionPerformed

    public void guardarReservacion(List<Habitacion> listadoHabitacion, String Estado, String fechaInicial, String fechaFinal) {
        listadoHabitaciones.clear();
        listadoHabitaciones.addAll(listadoHabitacion);
        estado = Estado;
        guardarButton.setEnabled(false);
        this.setVisible(true);
        this.fechaFinal = fechaFinal;
        this.fechaInicial = fechaInicial;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField NITTextField;
    private javax.swing.JButton cancelarButton;
    private javax.swing.JFormattedTextField cumpleFormattedTextField;
    private javax.swing.JTextField direccionTextField;
    private javax.swing.JButton guardarButton;
    private javax.swing.JTextField idClienteTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JButton limpiarButton;
    private javax.swing.JTextField nombreTextField;
    private javax.swing.JTextField telefonoTextField;
    // End of variables declaration//GEN-END:variables

    private void limpiar() {
        NITTextField.setText("");
        cumpleFormattedTextField.setText("");
        direccionTextField.setText("");
        idClienteTextField.setText("");
        nombreTextField.setText("");
        telefonoTextField.setText("");
        cliente = null;
    }
}
